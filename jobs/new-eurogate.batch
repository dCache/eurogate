#
#   use 'set printout default all' to get them all
#
#

#set printout default all
set printout CellGlue none
set printout default 3
#
onerror shutdown
########################################################################
#
#    load the external stuff
#
#  check if 'setupFile' is defined. if yes, get it and
#  run it. Then check for some variables we urgently need.
#
#
check -strong setupFile
copy file:${setupFile} context:setupFile
import context -c setupFile
#
check -strong sshPort aclPort clientPort pvlDbPort databaseRoot mode
#
########################################################################
#
#   now this is eurogate
#
#   the storeDatabase, pvlDatabase ... may have been set individually.
#   Therefor we don't want to overwrite the variables if already set.
#
onerror continue
set env -c storeDatabase        ${databaseRoot}/store
set env -c pvlDatabase          ${databaseRoot}/pvl
set env -c moverData            ${databaseRoot}/mover
set env -c usersDatabase        ${databaseRoot}/users
onerror shutdown
#
set env pvlName              pvl
set env scheduler            eurogate.pvl.scheduler.BasicScheduler
#set env storeClass    eurogate.store.objectivity52.ObjectivityStore
#set env storeDatabase /export/home/martin/cvs-eurogate/eurogate/store/objectivity52  
#
#   the rest is the ssh control path.
#   The current setup allows localhost login
#   without password. The 'server_key' and the
#   'host_key' are assumed to be in the .../jobs'
#   directory .
#
#    ssh-keygen -b  768 -f ./server_key -N ""
#    ssh-keygen -b 1024 -f ./host_key   -N ""
#
#

#    server_key :  768 bits
#    host_key   : 1024 bits
#
set context serverKeyFile     ${keyBase}/server_key
set context hostKeyFile       ${keyBase}/host_key
set env     AccessControlCell acm
set context userPasswordFile  cell:${AccessControlCell}
#
create dmg.cells.services.login.SshKeyManager    skm
#
create dmg.cells.network.TopoCell topo "none -update=100 -export"
#
create dmg.cells.services.login.LoginManager alm \
#      "${adminPort}  \
       "${sshPort}  \
       dmg.cells.services.login.StreamObjectCell \
       -prot=ssh -auth=dmg.cells.services.login.SshSAuth_A \
       diskCacheV111.admin.UserAdminShell"
#
create dmg.cells.services.login.user.AclCell ${AccessControlCell} \
       "${keyBase}/users -egpassword=${config}/passwd"
#
#
#
#   The http part
#
copy file:${documents}/docs/home.html context:home
#
define context HttpServerSetup endDefine
   set alias images directory ${documents}/docs/images 
   set alias <home> context home
   set alias x directory ${documents}
   set alias online class eurogate.misc.HttpEurogateService
   set alias system class dmg.cells.services.HttpSystemService
endDefine
#
create dmg.cells.services.HttpServiceCell  HttpServer 23080
#
########################################################################
#
#   the setup files
#
#  @@@   is needed to initiate the pvr database ( simulation and cern )
#
define context initPvlDatabase endDefine
    create volumeDescriptor  vd-9840    -size=20000000000
    create cartridgeDescriptor cd-9840  -type=9840
#
    create volumeDescriptor  vd-copan    -size=1000000000
    create cartridgeDescriptor cd-copan  -type=copan
#
    create pvr stk
#
#       create the cartridges
#
       create cartridge R01261-R01268  -cd=cd-9840  -pvr=stk
#
#        define volumes on that cartridges
#
       create volume V001 -cart=R01261 -pvr=stk  -vd=vd-9840
       create volume V002 -cart=R01262 -pvr=stk  -vd=vd-9840
       create volume V003 -cart=R01263 -pvr=stk  -vd=vd-9840
       create volume V004 -cart=R01264 -pvr=stk  -vd=vd-9840
       create volume V005 -cart=R01265 -pvr=stk  -vd=vd-9840
       create volume V006 -cart=R01266 -pvr=stk  -vd=vd-9840
       create volume V007 -cart=R01267 -pvr=stk  -vd=vd-9840
       create volume V008 -cart=R01268 -pvr=stk  -vd=vd-9840
#
#          define stk drives
#
       create drive stk-0 -pvr=stk  -dev=/eagle/d00 -spec=0:3:9:3
       create drive stk-1 -pvr=stk  -dev=/eagle/d01 -spec=0:3:9:4
       set drive stk-0 -pvr=stk  -status=enabled
       set drive stk-1 -pvr=stk  -status=enabled
#
    create pvr copan-0
    create pvr copan-1
    create cartridge VR01000-VR01010 -cd=cd-copan -pvr=copan-0
    create cartridge VR02000-VR02010 -cd=cd-copan -pvr=copan-1

       create volume VV0001 -cart=VR01000 -pvr=copan-0  -vd=vd-copan
       create volume VV0002 -cart=VR01001 -pvr=copan-0  -vd=vd-copan
       create volume VV0003 -cart=VR01002 -pvr=copan-0  -vd=vd-copan
       create volume VV0004 -cart=VR01003 -pvr=copan-0  -vd=vd-copan
       create volume VV0005 -cart=VR01004 -pvr=copan-0  -vd=vd-copan
       create volume VV0006 -cart=VR01005 -pvr=copan-0  -vd=vd-copan

       create volume VV0101 -cart=VR02000 -pvr=copan-1  -vd=vd-copan
       create volume VV0102 -cart=VR02001 -pvr=copan-1  -vd=vd-copan
       create volume VV0103 -cart=VR02002 -pvr=copan-1  -vd=vd-copan
       create volume VV0104 -cart=VR02003 -pvr=copan-1  -vd=vd-copan
       create volume VV0105 -cart=VR02004 -pvr=copan-1  -vd=vd-copan
       create volume VV0106 -cart=VR02005 -pvr=copan-1  -vd=vd-copan

       create drive copan-0-0 -pvr=copan-0  -dev=/copan/0/d00 -spec=C:0:0
       create drive copan-0-1 -pvr=copan-0  -dev=/copan/0/d01 -spec=C:0:1
       create drive copan-1-0 -pvr=copan-1  -dev=/copan/1/d00 -spec=C:1:0
       create drive copan-1-1 -pvr=copan-1  -dev=/copan/1/d01 -spec=C:1:1

       set drive copan-0-0 -pvr=copan-0  -status=enabled
       set drive copan-0-1 -pvr=copan-0  -status=enabled
       set drive copan-1-0 -pvr=copan-1  -status=enabled
       set drive copan-1-1 -pvr=copan-1  -status=enabled
#
#            create the volume sets
#
    create volumeSet  raw
    create volumeSet  dst
    create volumeSet  virtual-raw
    create volumeSet  virtual-dst
    create volumeSet  all
#
#       assign volumes to volume sets
#
    add volume V001 -vs=raw
    add volume V002 -vs=raw
    add volume V003 -vs=raw
    add volume V004 -vs=raw
    add volume V005 -vs=dst
    add volume V006 -vs=dst
    add volume V007 -vs=all
    add volume V008 -vs=all
    add volume VV0001 -vs=virtual-raw
    add volume VV0002 -vs=virtual-raw
    add volume VV0003 -vs=virtual-raw
    add volume VV0004 -vs=virtual-raw
    add volume VV0005 -vs=all
    add volume VV0006 -vs=all
    add volume VV0101 -vs=virtual-dst
    add volume VV0102 -vs=virtual-dst
    add volume VV0103 -vs=virtual-dst
    add volume VV0104 -vs=virtual-dst
    add volume VV0105 -vs=all
    add volume VV0106 -vs=all
endDefine
#
#   the pvr simulation ( corresponds to the setup above )
#
define context pvrStkDbInstallation endDefine
   create cartridge R01261 -pvr=stk
   create cartridge R01262 -pvr=stk
   create cartridge R01263 -pvr=stk
   create cartridge R01264 -pvr=stk
   create cartridge R01265 -pvr=stk
   create cartridge R01266 -pvr=stk
   create cartridge R01267 -pvr=stk
   create cartridge R01268 -pvr=stk
   create drive  0:3:9:3  -pvr=stk   
   create drive  0:3:9:4  -pvr=stk   
endDefine
define context pvrC0DbInstallation endDefine
   create cartridge VR01000 -pvr=copan-0
   create cartridge VR01001 -pvr=copan-0
   create cartridge VR01002 -pvr=copan-0
   create cartridge VR01003 -pvr=copan-0
   create cartridge VR01004 -pvr=copan-0
   create cartridge VR01005 -pvr=copan-0
   create drive  C:0:0  -pvr=copan-0   
   create drive  C:0:1  -pvr=copan-0   
endDefine
define context pvrC1DbInstallation endDefine
   create cartridge VR02000 -pvr=copan-1
   create cartridge VR02001 -pvr=copan-1
   create cartridge VR02002 -pvr=copan-1
   create cartridge VR02003 -pvr=copan-1
   create cartridge VR02004 -pvr=copan-1
   create cartridge VR02005 -pvr=copan-1
   create drive  C:1:0  -pvr=copan-1   
   create drive  C:1:1  -pvr=copan-1   
endDefine
#
#
define context pvrSimulation endDefine
#
###################################################################
#
   set context robotSpace       ${moverData}
#
#
   create eurogate.pvr.DummyPvrCell stk     \
          "${databaseRoot}/pvr/stk          \
          -autoinstall=pvrStkDbInstallation \
          -minWait=3 -maxWait=7"
#
   create eurogate.pvr.DummyPvrCell copan-0     \
          "${databaseRoot}/pvr/copan-0          \
          -autoinstall=pvrC0DbInstallation \
          -minWait=3 -maxWait=7"
#
   create eurogate.pvr.DummyPvrCell copan-1     \
          "${databaseRoot}/pvr/copan-1          \
          -autoinstall=pvrC1DbInstallation \
          -minWait=3 -maxWait=7"
#
###################################################################
#
#  #####                          #     #
# #     #     #    #    #         ##   ##   ####   #    #  ######  #####
# #           #    ##  ##         # # # #  #    #  #    #  #       #    #
#  #####      #    # ## #         #  #  #  #    #  #    #  #####   #    #
#       #     #    #    #         #     #  #    #  #    #  #       #####
# #     #     #    #    #         #     #  #    #   #  #   #       #   #
#  #####      #    #    #         #     #   ####     ##    ######  #    #
#
#
   create eurogate.mover.MoverV1 stk-0  "${pvlName} ${moverData}"
   create eurogate.mover.MoverV1 stk-1  "${pvlName} ${moverData}"
   create eurogate.mover.MoverV1 copan-0-0  "${pvlName} ${moverData}"
   create eurogate.mover.MoverV1 copan-0-1  "${pvlName} ${moverData}"
   create eurogate.mover.MoverV1 copan-1-0  "${pvlName} ${moverData}"
   create eurogate.mover.MoverV1 copan-1-1  "${pvlName} ${moverData}"
#
endDefine
#
define context pvrReal endDefine
#
#
######                                  ######
#     #  ######    ##    #              #     #  #    #  #####
#     #  #        #  #   #              #     #  #    #  #    #
######   #####   #    #  #              ######   #    #  #    #
#   #    #       ######  #              #        #    #  #####
#    #   #       #    #  #              #         #  #   #   #
#     #  ######  #    #  ######         #          ##    #    #
 
#
create eurogate.pvr.PvrLoginManager pvrInetd \
            "${pvrProxyPort} 
            eurogate.pvr.PvrLoginCell"
#
#
endDefine
#
#
#
#
###################################################################
#
#        ######
#        #     #   ####    ####   #####
#        #     #  #    #  #    #  #    #
#        #     #  #    #  #    #  #    #
#        #     #  #    #  #    #  #####
#        #     #  #    #  #    #  #   #
#        ######    ####    ####   #    #
#
#
#   this will start the door on request ...
#
create dmg.cells.services.login.LoginManager EuroGate \
        "${clientPort}    \
        eurogate.gate.EuroGate  \
        -prot=raw"
#
###################################################################
#
#         #####
#        #     #   #####   ####   #####   ######
#        #           #    #    #  #    #  #
#         #####      #    #    #  #    #  #####
#              #     #    #    #  #####   #
#        #     #     #    #    #  #   #   #
#         #####      #     ####   #    #  ######
#
#  The store is steered be the
#    ${storeClass} and the ${storeDatabase} variables.
#
check -strong storeClass storeDatabase
echo "Store using class    : ${storeClass}"
echo "Store using database : ${storeDatabase}"
create eurogate.store.StarGateVX MAIN-store  \
       "${storeClass}     \
        ${pvlName}        \
        ${storeDatabase}  \
        -dbpath=${storeDatabase}"
#
#
#   The pvl  :  pvlDbManager , pvlLogin and pvl itself.
#
#  the previous version would have needed :
#  set context databaseName ${databaseRoot}/pvl
#   
###################################################################
#
#                ######
#                #     #  #    #  #
#                #     #  #    #  #
#                ######   #    #  #
#                #        #    #  #
#                #         #  #   #
#                #          ##    ######
#
#
#
create eurogate.db.pvl.PvlDbManager PvlManager \
#           "${pvlDatabase} -acl=${securityCell} \
	    "${pvlDatabase} -acl=${AccessControlCell} \
           -autoinstall=initPvlDatabase"
#
create dmg.cells.services.login.LoginManager dbLogin \
      "${pvlDbPort}  \
       eurogate.db.pvl.PvlDbLoginCell \
       -prot=ssh -auth=dmg.cells.services.login.SshSAuth_X"
#
#create eurogate.pvl.PvlCoreV2  ${pvlName} "${scheduler} -acl=${securityCell}"
create eurogate.pvl.PvlCoreV2  ${pvlName} "${scheduler} -acl=${AccessControlCell}"
#
####################################################################
#
#  run the real or the simulated pvr
#
#  if ${mode} == simulation
#
   onerror continue
   eval ${mode} simulation ==
   set env isOk ${rc}
   onerror shutdown 
   exec context -run -ifok=isOk pvrSimulation
#
#  if ${mode} == real
#
   onerror continue
   eval ${mode} real ==
   set env isOk ${rc}
   onerror shutdown 
   exec context -run -ifok=isOk pvrReal
#
